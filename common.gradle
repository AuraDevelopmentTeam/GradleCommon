import io.franzbecker.gradle.lombok.task.DelombokTask
import java.security.SecureRandom
import java.util.regex.*
import org.apache.tools.ant.filters.ReplaceTokens
import proguard.gradle.ProGuardTask

def BUNGEECORD = "bungeecord"
def SPIGOT = "spigot"
def SPONGE = "sponge" 

if (!project.hasProperty("type")) {
    throw new NoSuchElementException("No type is specified!")
} else if ((type != BUNGEECORD) && (type != SPIGOT) && (type != SPONGE)) {
    throw new IllegalArgumentException("The type \"${type}\" is unknown.\nUse either \"${BUNGEECORD}\", \"${SPIGOT}\" or \"${SPONGE}\"")
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name "Gradle-Plugins"
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "net.sf.proguard:proguard-gradle:5.3.3"
        classpath "io.franzbecker:gradle-lombok:1.8"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
        classpath "gradle.plugin.org.spongepowered:spongegradle:0.8.1"
    }
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "com.github.johnrengelman.shadow"

if (type == SPONGE)
    apply plugin: "org.spongepowered.plugin"

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
    reTrace
    shadowRelocate
    shadow.extendsFrom shadowRelocate
    compile.extendsFrom shadow
}

repositories {
    jcenter()
    mavenCentral()

    maven {
        name "bungeecord-repo"
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name "spigot-repo"
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name "bstats-repo"
        url "http://repo.bstats.org/content/repositories/releases"
    }
}

dependencies {
    if (type == BUNGEECORD) {
        compile "net.md-5:bungeecord-api:${bungeecoord_version}"

        shadowRelocate "org.bstats:bstats-bungeecord:${bStats_version}"
    } else if () {
        compile "org.spigotmc:spigot-api:${spigot_version}"

        shadowRelocate "org.bstats:bstats-bukkit:${bStats_version}"
    } else if (type == SPONGE) {
        compile "org.spongepowered:spongeapi:${sponge_version}"

        shadowRelocate "org.bstats:bstats-sponge:${bStats_version}"
    }

    testCompile "junit:junit:4.12"
}

lombok {
    version = "1.16.16"
    sha256 = "fbf682c7ff113e5187a9c4b4cbd7a8ad782abd8ccff91b9fa7289a4a6aa8c19a"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "build", build
    inputs.property "buildType", buildType
    
    expand "version": version, "build": build, "buildType": buildType
}

task processSources (type: Sync) {
    inputs.property "version", version
    inputs.property "build", build
    inputs.property "buildType", buildType
    ext.outputDir = file("$buildDir/generated-src")
    
    from sourceSets.main.allSource
    into outputDir
    filter (ReplaceTokens, tokens: [
        "version": version,
        "build": build,
        "buildType": buildType
    ])
}

task delombok(type: DelombokTask, dependsOn: compileJava) {
    group "build"
    description "Generates Lombok free Java code from code with Lombok"

  	ext.outputDir = file("$buildDir/delombok")
    
  	outputs.dir(outputDir)
		inputs.dir(processSources.outputDir)
		args(processSources.outputDir, "-d", outputDir)
    
    doLast {
        fileTree(dir: outputDir, exclude: "**/*.java").forEach{file -> file.delete()}
    }
}

compileJava {
    source = processSources.outputs
    dependsOn processSources 
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    from sourceSets.main.output
    from MainDirResources
    
    version = full_version
}

task sourceJar (type: Jar, dependsOn: processSources) {
    group "build"

    from sourceSets.main.allSource
    from MainDirResources

    classifier = "sources"
    version = jar.version
}

javadoc {
    dependsOn delombok

    source = delombok.outputDir
    classpath = sourceSets.main.compileClasspath
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group "build"

    from javadoc.destinationDir
    
    classifier = "javadoc"
    version = jar.version
}

shadowJar {
    from sourceSets.main.output
    from MainDirResources
    
    classifier = "deobf"
    version = jar.version
    configurations = [project.configurations.shadow]
    
    project.configurations.shadowRelocate.dependencies.each {
        relocate(it.group, "${project.group}.shadow.${it.group}")
    }
}
