import org.apache.tools.ant.DirectoryScanner
import org.apache.tools.ant.taskdefs.condition.Os

import java.util.stream.Collectors

description "Common Gradle Build Script"

def getLatestTag() {
    return "git rev-list --tags --max-count=1".execute(null, projectDir).text.trim()
}
def getNewTagVersion() {
    def gitDescription = "git describe --tags".execute(null, projectDir).text.trim()
    def tempVersion = Arrays.stream(gitDescription.replaceAll("^v|-.*", "").split("\\."), 0, 3).mapToInt{num -> Integer.parseInt(num)}.toArray()

    if (project.hasProperty("major")) {
        tempVersion[0]++;
        tempVersion[1] = 0;
        tempVersion[2] = 0;
    } else if (project.hasProperty("minor")) {
        tempVersion[1]++;
        tempVersion[2] = 0;
    } else {
        tempVersion[2]++;
    }

    return Arrays.stream(tempVersion).mapToObj{num -> Integer.toString(num)}.collect(Collectors.joining("."))
}

task gitTag {
        group "help"
        description """Tags the current version in git.
Specify "-Pminor" to update the minor version.
Specify "-Pmajor" to update the major version."""

        doLast {
            def tagVersion = "v${getNewTagVersion()}"

            exec {
                executable "git"
                args "tag", "-a", tagVersion, "-m", tagVersion
            }
        }
    }

if (project.hasProperty("newProjectDir")) {
    File destiontionDir = new File(newProjectDir)

    task initRepo(type: Exec) {
        workingDir destiontionDir

        executable "git"
        args "init"
    }

    task addSubmodule(type: Exec, dependsOn: initRepo) {
        workingDir destiontionDir

        executable "git"
        args "submodule", "add", "https://github.com/AuraDevelopmentTeam/GradleCommon.git"

        ignoreExitValue = true
    }

    task setGitTag(type: Exec, dependsOn: addSubmodule) {
        workingDir new File(destiontionDir, "GradleCommon")

        executable "git"
        args "checkout", "${-> getLatestTag()}"
    }

    task initGradle(type: Exec) {
        workingDir destiontionDir

        executable file(Os.isFamily(Os.FAMILY_WINDOWS) ? "gradlew.bat" : "gradlew")
        args "-Dorg.gradle.daemon=false", "--console=plain", "init", "wrapper"

        shouldRunAfter setGitTag
    }

    task copyTemplateFiles(type: Copy, dependsOn: initGradle) {
        doFirst {
            DirectoryScanner.defaultExcludes.each { DirectoryScanner.removeDefaultExclude it }
            DirectoryScanner.addDefaultExclude "something has to be in here or everything gets excluded"
        }

        from(projectDir) {
            include ".editorconfig"
            include ".gitattributes"
            include ".gitignore"
            include ".github/FUNDING.yml"
        }

        from "template"

        into destiontionDir

        doLast {
            DirectoryScanner.resetDefaultExcludes()
        }
    }

    task addAllFiles(type: Exec, dependsOn: [setGitTag, copyTemplateFiles]) {
        workingDir destiontionDir

        executable "git"
        args "add", "-A"
    }

    task makeGradlewExecutable(type: Exec, dependsOn: addAllFiles) {
        workingDir destiontionDir

        executable "git"
        args "update-index", "--chmod=+x", "gradlew"
    }

    task createFirstCommit(type: Exec, dependsOn: makeGradlewExecutable) {
        workingDir destiontionDir

        executable "git"
        args "commit", "-m", "Initial commit!\n\n[ci skip]"
    }

    task createFirstTag(type: Exec, dependsOn: createFirstCommit) {
        workingDir destiontionDir

        executable "git"
        args "tag", "-a", "v0.0.0", "-m", "Project starts!"
    }

    task addGitHooks(type: Exec, dependsOn: initGradle) {
        workingDir destiontionDir

        executable file(Os.isFamily(Os.FAMILY_WINDOWS) ? "gradlew.bat" : "gradlew")
        args "-Dorg.gradle.daemon=false", "--console=plain", "addGitHooks"

        shouldRunAfter createFirstTag
    }

    task createNewProject(dependsOn: [initRepo, addSubmodule, setGitTag, initGradle, copyTemplateFiles, addAllFiles, makeGradlewExecutable, createFirstCommit, createFirstTag, addGitHooks]) {}
}

task resetChanges(type: Exec) {
    workingDir projectDir

    executable "git"
    args "reset", "--hard"
}

task fetchUpdates(type: Exec, dependsOn: resetChanges) {
    workingDir projectDir

    executable "git"
    args "fetch", "--tags"
}

task checkoutLatestTag(type: Exec, dependsOn: fetchUpdates) {
    workingDir projectDir

    executable "git"
    args "checkout", "${-> getLatestTag()}"
}

task updateTemplateFiles(dependsOn: checkoutLatestTag) {
    doLast {
        DirectoryScanner.defaultExcludes.each { DirectoryScanner.removeDefaultExclude it }
        DirectoryScanner.addDefaultExclude "something has to be in here or everything gets excluded"

        copy {
            from(project.file("template")) {
                exclude "build.gradle"
                exclude "gradle.properties"
                exclude "settings.gradle"
            }

            from(project.file(".")) {
                include ".editorconfig"
                include ".gitignore"
                include ".gitattributes"
                include ".github/FUNDING.yml"
            }

            into project.file("..")
        }

        DirectoryScanner.resetDefaultExcludes()
    }
}

task updateGradleWrapper1(type: Exec, dependsOn: updateTemplateFiles) {
    def gradleVersion

    doFirst {
        gradleVersion = file("gradle/wrapper/gradle-wrapper.properties").text =~ /(?<=gradle-)\d+(?:\.\d+){1,2}/
        gradleVersion = gradleVersion.find() ? gradleVersion.group() : gradle.gradleVersion
    }

    workingDir project.file("..")

    executable file(Os.isFamily(Os.FAMILY_WINDOWS) ? "gradlew.bat" : "gradlew")
    args "-Dorg.gradle.daemon=false", "--console=plain", "wrapper", "--gradle-version=${-> gradleVersion}"
}

task updateGradleWrapper2(type: Exec, dependsOn: updateGradleWrapper1) {
    workingDir project.file("..")

    executable file(Os.isFamily(Os.FAMILY_WINDOWS) ? "gradlew.bat" : "gradlew")
    args "-Dorg.gradle.daemon=false", "--console=plain", "wrapper"
}

task stageUpdate(type: Exec, dependsOn: updateGradleWrapper2) {
    workingDir project.file("..")

    executable "git"
    args "add",
            "GradleCommon",
            ".editorconfig",
            ".gitlab-ci.yml",
            ".travis.yml",
            ".gitignore",
            ".gitattributes",
            "gradlew",
            "gradlew.bat",
            "gradle/wrapper/gradle-wrapper.jar",
            "gradle/wrapper/gradle-wrapper.properties",
            ".github/FUNDING.yml",
            ".github/CONTRIBUTING.md",
            ".github/workflows/code_checks.yml",
            ".github/workflows/code_checks_reports.yml",
            ".github/workflows/lang_checks.yml"
}

task commitUpdate(type: Exec, dependsOn: stageUpdate) {
    workingDir project.file("..")

    executable "git"
    args "commit", "-m", "Updated Gradle Common"

    ignoreExitValue = true
}

task updateGradleCommon(dependsOn: [resetChanges, fetchUpdates, checkoutLatestTag, updateTemplateFiles, updateGradleWrapper1, updateGradleWrapper2, stageUpdate, commitUpdate])
