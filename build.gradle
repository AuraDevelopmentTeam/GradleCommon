import org.apache.tools.ant.DirectoryScanner
import org.apache.tools.ant.taskdefs.condition.Os

description "Common Gradle Build Script"

def getLatestTag() {
    return "git rev-list --tags --max-count=1".execute(null, projectDir).text.trim()
}

if (project.hasProperty("newProjectDir")) {
    File destiontionDir = new File(newProjectDir)

    task initGit(type: Exec) {
        workingDir destiontionDir

        executable "git"
        args "init"
    }

    task addSubmodule(type: Exec, dependsOn: initGit) {
        workingDir destiontionDir

        executable "git"
        args "submodule", "add", "../../AuraDev/GradleCommon.git"

        ignoreExitValue = true
    }

    task setGitTag(type: Exec, dependsOn: addSubmodule) {
        workingDir new File(destiontionDir, "GradleCommon")

        executable "git"
        args "checkout", "${-> getLatestTag()}"
    }

    task initGradle(type: Exec) {
        workingDir destiontionDir

        executable file(Os.isFamily(Os.FAMILY_WINDOWS)? "gradlew.bat" : "gradlew")
        args "-Dorg.gradle.daemon=false", "init", "wrapper"

        shouldRunAfter setGitTag
    }

    task copyTemplateFiles(type: Copy, dependsOn: initGradle) {
        doFirst {
            DirectoryScanner.defaultExcludes.each { DirectoryScanner.removeDefaultExclude it }
            DirectoryScanner.addDefaultExclude "something has to be in here or everything gets excluded"
        }

        from (projectDir) {
            include ".gitattributes"
            include ".gitignore"
        }

        from "template"

        into destiontionDir

        doLast {
            DirectoryScanner.resetDefaultExcludes()
        }
    }

    task addAllFiles(type: Exec, dependsOn: [setGitTag, copyTemplateFiles]) {
        workingDir destiontionDir

        executable "git"
        args "add", "-A"
    }

    task makeGradlewExecutable(type: Exec, dependsOn: addAllFiles) {
        workingDir destiontionDir

        executable "git"
        args "update-index", "--chmod=+x", "gradlew"
    }

    task createFirstCommit(type: Exec, dependsOn: makeGradlewExecutable) {
        workingDir destiontionDir

        executable "git"
        args "commit", "-m", "Initial commit!"
    }

    task createFirstTag(type: Exec, dependsOn: createFirstCommit) {
        workingDir destiontionDir

        executable "git"
        args "tag", "-a", "v0.0.0", "-m", "Project starts!"
    }

    task createNewProject(dependsOn: [initGit, addSubmodule, setGitTag, initGradle, copyTemplateFiles, addAllFiles, makeGradlewExecutable, createFirstCommit, createFirstTag]) {}
}

task resetChanges(type: Exec) {
    workingDir projectDir

    executable "git"
    args "reset", "--hard"
}

task fetchUpdates(type: Exec, dependsOn: resetChanges) {
    workingDir projectDir

    executable "git"
    args "fetch", "--tags"
}

task checkoutLatestTag(type: Exec, dependsOn: fetchUpdates) {
    workingDir projectDir

    executable "git"
    args "checkout", "${-> getLatestTag()}"
}

task stageUpdate(type: Exec, dependsOn: checkoutLatestTag) {
    workingDir project.file("..")

    executable "git"
    args "add", "GradleCommon"
}


task commitUpdate(type: Exec, dependsOn: stageUpdate) {
    workingDir project.file("..")

    executable "git"
    args "commit", "-m", "Updated Gradle Common"

    ignoreExitValue = true
}

task updateGradleCommon(dependsOn: [resetChanges, fetchUpdates, checkoutLatestTag, stageUpdate, commitUpdate])
